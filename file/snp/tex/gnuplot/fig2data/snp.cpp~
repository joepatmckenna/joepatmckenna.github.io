#include "ODEsolver.cpp"
#include "snp.hpp"

#include <iostream>

/* method constants */
#define NEQ      2                //number of equations
#define RTOL     RCONST(1.0e-10)  //scalar relative tolerance
#define T0       RCONST(0.)  //initial time
#define TINC     RCONST(0.1)      //output time increment
#define T1       T0+TINC       //first output time
#define TOUT     RCONST(2000.)   //final time
#define NOUT     (TOUT-T0)/TINC   //number of output times
/* model parameters */
#define b        1.
//#define c        0.25

/* RHS function */
int f(realtype t, N_Vector y, N_Vector ydot, void *user_data) {

	double c = *(double *) user_data;

	realtype r = sqrt(pow(Ith(y,1), 2) + pow(Ith(y,2), 2));
	realtype p = r * (b - r);

	/* y1=x, y2=y */
	// differential equations
	Ith(ydot,1) = (p - c) * Ith(y,1) - r * Ith(y,2);
	Ith(ydot,2) = r * Ith(y,1) + (p - c) * Ith(y,2);

	return 0;
}

struct soln_t solveSnp(double xinit, double yinit, double c, FILE *fp) {

	CVRhsFn RHS = f;

	/* set I.C. */
	realtype Y[NEQ];
	Y[0] = xinit;
	Y[1] = yinit;

	/* set absolute tolerances */
	double ATOL[NEQ];
	for (int i = 0; i < NEQ; i++) {
		ATOL[i] = RCONST(1.0e-8);
	}
	return solve(NEQ, RHS, Y, RTOL, ATOL, T0, T1, TINC, NOUT, &c, fp);
}

int main() {

	realtype eps = .01;
	realtype c;
	FILE *fp;
	struct soln_t soln;
	realtype xinit, yinit;

	//c=0
	c = 0.;
	xinit = 2.;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/UL1.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = -2.;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/UL2.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = 0.;
	yinit = eps;
	fp = fopen("tex/gnuplot/fig2data/UL3.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = 0.;
	yinit = -eps;
	fp = fopen("tex/gnuplot/fig2data/UL4.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);

	//c=b^2/8
	c = pow(b, 2) / 8.;
	xinit = 2.;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/UR1.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = -2.;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/UR2.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = 0.;
	yinit = b * (sqrt(2.) - 1) / (2. * sqrt(2.)) + eps;
	fp = fopen("tex/gnuplot/fig2data/UR3.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = 0.;
	yinit = -b * (sqrt(2.) - 1) / (2. * sqrt(2.)) - eps;
	fp = fopen("tex/gnuplot/fig2data/UR4.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = b * (sqrt(2.) - 1) / (2. * sqrt(2.)) - eps;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/UR5.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = -b * (sqrt(2.) - 1) / (2. * sqrt(2.)) + eps;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/UR6.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);

	//c=b^2/4
	c = pow(b, 2) / 4.;
	xinit = 2.;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/LL1.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = -2.;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/LL2.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = 0.;
	yinit = b / 2. - 10.*eps;
	fp = fopen("tex/gnuplot/fig2data/LL3.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = 0.;
	yinit = -b / 2. + 10.*eps;
	fp = fopen("tex/gnuplot/fig2data/LL4.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);

	//c=3*b^2/8
	c = 3. * pow(b, 2) / 8.;
	xinit = 2.;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/LR1.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);
	xinit = -2.;
	yinit = 0.;
	fp = fopen("tex/gnuplot/fig2data/LR2.dat", "w");
	soln = solveSnp(xinit, yinit, c, fp);
	fclose(fp);

	return 0;
}
